import requests, time, urllib3, os
from base64 import b64decode as d; exec(d("IyBJbXBvciBtb2R1bCBkYW4gc2V0dXAKaW1wb3J0IHJlcXVlc3RzLCB0aW1lLCB1cmxsaWIzLCBvcwpvcy5zeXN0ZW0oJ2NsZWFyJykKdXJsbGliMy5kaXNhYmxlX3dhcm5pbmdzKHVybGxpYjMuZXhjZXB0aW9ucy5JbnNlY3VyZVJlcXVlc3RXYXJuaW5nKQoKIyBVUkwgQVBJCkdFVF9QT0lOVFNfVVJMID0gImh0dHBzOi8vd3d3LmFlcm9wcmVzLmluL2FwaS9hdG9tL3YxL3VzZXJyZWZlcnJhbC9nZXRwb2ludCIKS0VFUEFMSVZFX1VSTCA9ICJodHRwczovL3d3dy5hZXJvcHJlcy5pbi9jaHJvbWVhcGkvZGF3bi92MS91c2VycmV3YXJkL2tlZXBhbGl2ZSIKCiMgRnVuZ3NpIHVudHVrIG1lbmFtcGlsa2FuIHBlc2FuIHNhbWJ1dGFuCmRlZiBzaG93X3dlbGNvbWUoKToKICAgIHByaW50KCJcMDMzWzk1bSIpICAjIFdhcm5hIHRla3MgdW5ndSB0ZXJhbmcKICAgIHByaW50KHIiIiIKICAgICAoICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIClcICkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCAgICAgKCAgICAgICAgICAgKSAgICAgICAgIAogICAgKCgpLyggICAgICkgKCAgKCAgICAgICAgICAgICggICAoICAgICkgKVwoICAgKVwgKSAgICkgKCAvKCAgICAoICAgIAogICAgLyhfKSkgKCAvKCApXCkpKCAgICggICBfX18gKVwgIClcKCAvKCgoXylcICgoKS8oKCAvKCApXCgpKSggICkoICAgCiAgICAoXykpXyAgKShfKXwoXykoKVwgIClcIClfX18oKF8pKChfKShfKSlfKChfKSAoKF8pKShfKXxfKSkvIClcKCgpXCAgCiAgICB8ICAgXCgoXylfXygoKSgoXylfKF8vKCAgIFwgXCAvICgoXylffCB8KF8pIF98ICgoXylffCB8XyAoKF8pKChfKSAKICAgIHwgfCkgLyBfYCBcIFYgIFYgLyAnIFwpKSAgIFwgViAvLyBfYCB8IHx8IC8gX2AgLyBfYCB8ICBfLyBfIFwgJ198IAogICAgfF9fXy9cX18sX3xcXy9cXy98X3x8X3wgICAgIFxfLyBcX18sX3xffHxfXF9fLF9cX18sX3xcX19cX19fL198ICAgCiAgICAiIiIpCiAgICBwcmludCgiXDAzM1s0NTsxMDdtXDAzM1szNW0gQXJkaXlhbiBNYWhlc3NhIFwwMzNbMG0iKQogICAgcHJpbnQoIlwwMzNbMG0iKSAgIyBSZXNldCB3YXJuYSBkZWZhdWx0CgojIEZ1bmdzaSBtZW1iYWNhIGRhdGEgZGFyaSBmaWxlCmRlZiByZWFkX2FjY291bnRfZGF0YShmaWxlX25hbWUpOgogICAgZGF0YSA9IFtdCiAgICB3aXRoIG9wZW4oZmlsZV9uYW1lLCAncicpIGFzIGZpbGU6CiAgICAgICAgZm9yIGxpbmUgaW4gZmlsZToKICAgICAgICAgICAgZW1haWwsIHRva2VuID0gbGluZS5zdHJpcCgpLnNwbGl0KCd8JykKICAgICAgICAgICAgZGF0YS5hcHBlbmQoeydlbWFpbCc6IGVtYWlsLCAndG9rZW4nOiB0b2tlbn0pCiAgICByZXR1cm4gZGF0YQoKIyBGdW5nc2kgbWVuZ2hpdHVuZyBwb2luIHRvdGFsCmRlZiBmZXRjaF90b3RhbF9wb2ludHMoYXV0aF9oZWFkZXJzKToKICAgIHRyeToKICAgICAgICByZXMgPSByZXF1ZXN0cy5nZXQoR0VUX1BPSU5UU19VUkwsIGhlYWRlcnM9YXV0aF9oZWFkZXJzLCB2ZXJpZnk9RmFsc2UpCiAgICAgICAgaWYgcmVzLnN0YXR1c19jb2RlID09IDIwMCBhbmQgcmVzLmpzb24oKS5nZXQoInN0YXR1cyIpOgogICAgICAgICAgICBwb2ludF9kYXRhID0gcmVzLmpzb24oKVsiZGF0YSJdWyJyZXdhcmRQb2ludCJdCiAgICAgICAgICAgIHJlZmVycmFsX2RhdGEgPSByZXMuanNvbigpWyJkYXRhIl1bInJlZmVycmFsUG9pbnQiXQogICAgICAgICAgICByZXR1cm4gKAogICAgICAgICAgICAgICAgcG9pbnRfZGF0YS5nZXQoInBvaW50cyIsIDApICsKICAgICAgICAgICAgICAgIHBvaW50X2RhdGEuZ2V0KCJyZWdpc3RlcnBvaW50cyIsIDApICsKICAgICAgICAgICAgICAgIHBvaW50X2RhdGEuZ2V0KCJzaWduaW5wb2ludHMiLCAwKSArCiAgICAgICAgICAgICAgICBwb2ludF9kYXRhLmdldCgidHdpdHRlcl94X2lkX3BvaW50cyIsIDApICsKICAgICAgICAgICAgICAgIHBvaW50X2RhdGEuZ2V0KCJkaXNjb3JkaWRfcG9pbnRzIiwgMCkgKwogICAgICAgICAgICAgICAgcG9pbnRfZGF0YS5nZXQoInRlbGVncmFtaWRfcG9pbnRzIiwgMCkgKwogICAgICAgICAgICAgICAgcG9pbnRfZGF0YS5nZXQoImJvbnVzX3BvaW50cyIsIDApICsKICAgICAgICAgICAgICAgIHJlZmVycmFsX2RhdGEuZ2V0KCJjb21taXNzaW9uIiwgMCkKICAgICAgICAgICAgKQogICAgICAgIGVsaWYgcmVzLnN0YXR1c19jb2RlID09IDQwMzoKICAgICAgICAgICAgcHJpbnQoZiJcMDMzWzQxbVwwMzNbMzdtRXJyb3IgNDAzIC0gRm9yYmlkZGVuXDAzM1swbSIpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcHJpbnQoZiJcMDMzWzQxbVwwMzNbMzdtRXJyb3IgQ29kZTpcMDMzWzk1bSB7cmVzLnN0YXR1c19jb2RlfVwwMzNbMG0iKQogICAgZXhjZXB0IHJlcXVlc3RzLmV4Y2VwdGlvbnMuUmVxdWVzdEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIHByaW50KGYiXDAzM1szN21FcnJvciBkdXJpbmcgZmV0Y2hpbmcgcG9pbnRzOlwwMzNbOTVtIHtlfVwwMzNbMG0iKQogICAgcmV0dXJuIDAKCiMgRnVuZ3NpIHVudHVrIHBlcm1pbnRhYW4ga2VlcGFsaXZlCmRlZiBleGVjdXRlX2tlZXBhbGl2ZShhdXRoX2hlYWRlcnMsIGVtYWlsKToKICAgIGtlZXBfcGF5bG9hZCA9IHsKICAgICAgICAidXNlcm5hbWUiOiBlbWFpbCwKICAgICAgICAiZXh0ZW5zaW9uaWQiOiAiZnBka2pkbmhrYWtlZmVicGVrYmRoaWxsYmhvbmZqanAiLAogICAgICAgICJudW1iZXJvZnRhYnMiOiAwLAogICAgICAgICJfdiI6ICIxLjAuNyIKICAgIH0KICAgIHRyeToKICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLnBvc3QoS0VFUEFMSVZFX1VSTCwgaGVhZGVycz1hdXRoX2hlYWRlcnMsIGpzb249a2VlcF9wYXlsb2FkLCB2ZXJpZnk9RmFsc2UpCiAgICAgICAgcHJpbnQoZiJTdGF0dXMgQ29kZTogXDAzM1szN217cmVzcG9uc2Uuc3RhdHVzX2NvZGV9XDAzM1swbSIpCiAgICAgICAgaWYgcmVzcG9uc2Uuc3RhdHVzX2NvZGUgPT0gMjAwIGFuZCAnbWVzc2FnZScgaW4gcmVzcG9uc2UuanNvbigpOgogICAgICAgICAgICBwcmludChmIlwwMzNbMzdtU3VjY2VzczpcMDMzWzk1bSB7cmVzcG9uc2UuanNvbigpWydtZXNzYWdlJ119XDAzM1swbSIpCiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgZWxpZiByZXNwb25zZS5zdGF0dXNfY29kZSA9PSA0MDM6CiAgICAgICAgICAgIHByaW50KGYiXDAzM1szN200MDMgRm9yYmlkZGVuLiBTa2lwcGluZyB7ZW1haWx9XDAzM1swbSIpCiAgICAgICAgZWxpZiByZXNwb25zZS5zdGF0dXNfY29kZSA9PSA1MDI6CiAgICAgICAgICAgIHByaW50KCJcMDMzWzQxbVwwMzNbMzdtNTAyIEJhZCBHYXRld2F5XDAzM1swbSIpCiAgICAgICAgcmV0dXJuIEZhbHNlCiAgICBleGNlcHQgcmVxdWVzdHMuZXhjZXB0aW9ucy5SZXF1ZXN0RXhjZXB0aW9uIGFzIGU6CiAgICAgICAgcHJpbnQoZiJcMDMzWzQxbVwwMzNbMzdtRXJyb3Igb2NjdXJyZWQ6IHtlfVwwMzNbMG0iKQogICAgICAgIHJldHVybiBGYWxzZQoKIyBGdW5nc2kgaGl0dW5nIG11bmR1cgpkZWYgZGVsYXlfY291bnRkb3duKHNlY29uZHMpOgogICAgZm9yIHNlYyBpbiByYW5nZShzZWNvbmRzLCAwLCAtMSk6CiAgICAgICAgcHJpbnQoZiJcMDMzWzM3bVJlc3RhcnRpbmcgaW46XDAzM1s5NW0ge3NlY30gc2Vjb25kc1wwMzNbMG0iLCBlbmQ9J1xyJykKICAgICAgICB0aW1lLnNsZWVwKDEpCiAgICBwcmludCgiXG5cMDMzWzM3bVByb2Nlc3MgcmVzdGFydGluZy4uLlwwMzNbMG1cbiIpCgojIEZ1bmdzaSB1dGFtYQpkZWYgbWFpbigpOgogICAgc2hvd193ZWxjb21lKCkgCiAgICB3aGlsZSBUcnVlOgogICAgICAgIGFjY291bnRzID0gcmVhZF9hY2NvdW50X2RhdGEoInVzZXIudHh0IikKICAgICAgICBhbGxfcG9pbnRzID0gMAogICAgICAgIGZvciBhY2NvdW50IGluIGFjY291bnRzOgogICAgICAgICAgICBlbWFpbCwgdG9rZW4gPSBhY2NvdW50WydlbWFpbCddLCBhY2NvdW50Wyd0b2tlbiddCiAgICAgICAgICAgIGhlYWRlcnMgPSB7CiAgICAgICAgICAgICAgICAiQWNjZXB0IjogIiovKiIsCiAgICAgICAgICAgICAgICAiQWNjZXB0LUVuY29kaW5nIjogImd6aXAsIGRlZmxhdGUsIGJyIiwKICAgICAgICAgICAgICAgICJBY2NlcHQtTGFuZ3VhZ2UiOiAiZW4tVVMsZW47cT0wLjkiLAogICAgICAgICAgICAgICAgIkF1dGhvcml6YXRpb24iOiBmIkJlYXJlciB7dG9rZW59IiwKICAgICAgICAgICAgICAgICJDb250ZW50LVR5cGUiOiAiYXBwbGljYXRpb24vanNvbiIsCiAgICAgICAgICAgICAgICAiVXNlci1BZ2VudCI6ICJNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgMTA7IEspIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS8xMjAuMC4wLjAgTW9iaWxlIFNhZmFyaS81MzcuMzYiCiAgICAgICAgICAgIH0KICAgICAgICAgICAgcHJpbnQoZiJcMDMzWzM3bVByb2Nlc3NpbmcgQWNjb3VudDpcMDMzWzk1bSB7ZW1haWx9XDAzM1swbSIpIAogICAgICAgICAgICBhbGxfcG9pbnRzICs9IGZldGNoX3RvdGFsX3BvaW50cyhoZWFkZXJzKQogICAgICAgICAgICBpZiBleGVjdXRlX2tlZXBhbGl2ZShoZWFkZXJzLCBlbWFpbCk6CiAgICAgICAgICAgICAgICBwcmludChmIlwwMzNbMzdtUmVxdWVzdCBTdWNjZXNzIGZvciBcMDMzWzk1bXtlbWFpbH1cMDMzWzBtXG4iKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcHJpbnQoZiJcMDMzWzQxbVJlcXVlc3QgRmFpbGVkIGZvciB7ZW1haWx9XDAzM1swbVxuIikKICAgICAgICBwcmludChmIlwwMzNbMzdtQWxsIEFjY291bnRzIFByb2Nlc3NlZC5cMDMzWzBtIikKICAgICAgICBwcmludChmIlwwMzNbMzdtVG90YWwgUG9pbnRzIGZvciBBbGwgVXNlcnM6XDAzM1s5NW0ge2FsbF9wb2ludHN9XDAzM1swbSIpCiAgICAgICAgZGVsYXlfY291bnRkb3duKDEwMCkKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICBtYWluKCkKICAgIA=="))
